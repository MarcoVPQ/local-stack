AWSTemplateFormatVersion: '2010-09-09'
Description: SNS → SQS → Lambda → DynamoDB Pattern

Resources:

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: MySNSTopic

  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: MyQueue

  SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      Endpoint:
        Fn::GetAtt:
          - SQSQueue
          - Arn
      TopicArn: !Ref SNSTopic
      RawMessageDelivery: true

  SQSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref SQSQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "SQS:SendMessage"
            Resource: !GetAtt SQSQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref SNSTopic

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: MessagesTable
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaDynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt DynamoDBTable.Arn
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt SQSQueue.Arn
              - Effect: Allow
                Action: logs:*
                Resource: "*"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SQSToDynamoLambda
      Runtime: python3.9
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import uuid

          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('MessagesTable')

          def lambda_handler(event, context):
              for record in event['Records']:
                  body = json.loads(record['body'])
                  table.put_item(Item={
                      'id': str(uuid.uuid4()),
                      'message': json.dumps(body)
                  })
              return {'statusCode': 200, 'body': 'Processed'}

  LambdaSQSTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      EventSourceArn: !GetAtt SQSQueue.Arn
      FunctionName: !Ref LambdaFunction
      Enabled: true
